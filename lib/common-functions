#!/bin/bash

function _chroot_unmount()
{
    [[ $(ls "${ROOTFS_DIR}/dev"  | wc -l) -gt 0 ]] && umount -f "${ROOTFS_DIR}/dev"
    [[ $(ls "${ROOTFS_DIR}/sys"  | wc -l) -gt 0 ]] && umount -f "${ROOTFS_DIR}/sys"
    [[ $(ls "${ROOTFS_DIR}/proc" | wc -l) -gt 0 ]] && umount -f "${ROOTFS_DIR}/proc"
}

function _chroot_run()
{
    chroot "${ROOTFS_DIR}" bash -c "${1}"
}

function _chroot_mount()
{
    trap '_chroot_unmount' EXIT
    [[ $(ls "${ROOTFS_DIR}/dev"  | wc -l) -eq 0 ]] && mount --bind /dev   "${ROOTFS_DIR}/dev"
    [[ $(ls "${ROOTFS_DIR}/sys"  | wc -l) -eq 0 ]] && mount --bind /sys   "${ROOTFS_DIR}/sys"
    [[ $(ls "${ROOTFS_DIR}/proc" | wc -l) -eq 0 ]] && mount --bind /proc  "${ROOTFS_DIR}/proc"
}

function validate_requirements_rootfs_image_type_squashfs()
{
    if ! command -v mksquashfs &>/dev/null; then
        msg_error "缺少 mksquashfs 命令!" 1
    fi
}

function run_mksquashfs() {
    local mksquashfsOptions=() imagePath="${ISO_DIR}/${APP_NAME}/${ARCH}/airootfs.sfs"
    rm -f -- "${imagePath}"
    mksquashfsOptions+=('-no-progress' '-quiet')
    mksquashfs "$@" "${imagePath}" -noappend "${ROOTFS_IMAGE_SQUASHFS_OPTIONS[@]}" "${mksquashfsOptions[@]}"
}

function make_rootfs_squashfs()
{
    install -d -m 0755 -- "${ISO_DIR}/${APP_NAME}/${ARCH}"
    msg_info "Creating SquashFS image, this may take some time..."
    run_mksquashfs "${ROOTFS_DIR}"
}


# 检查配置是否合理
function build_mode_requirements_iso()
{
    # Check if the specified airootfs_image_type is supported
    if typeset -f "make_rootfs_${ROOTFS_IMAGE_TYPE}" &>/dev/null; then
        if typeset -f "validate_requirements_rootfs_image_type_${ROOTFS_IMAGE_TYPE}" &>/dev/null; then
            "validate_requirements_rootfs_image_type_${ROOTFS_IMAGE_TYPE}"
        else
            msg_warn "缺少 'validate_requirements_rootfs_image_type_${ROOTFS_IMAGE_TYPE}' 函数!"
        fi
    else
        msg_error "不支持: '${ROOTFS_IMAGE_TYPE}' 镜像类型!"
    fi

    # FIXME:// 检测 pacman、find、gzip 命令是否存在
    
    # 检测 bootmodes 中的值是否可用
    for bootMode in "${BOOT_MODES[@]}"; do
        if typeset -f "make_boot_${bootMode}" &>/dev/null; then
            if typeset -f "validate_requirements_boot_${bootMode}" &>/dev/null; then
                "validate_requirements_boot_${bootMode}"
            else
                msg_error "'validate_requirements_boot_${bootMode}' 不存在!" 1
            fi
        else
            msg_error "不支持 '${bootMode}'!" 1
        fi
    done
}

function check_is_validate_options()
{
    local vError=0 

    msg_info "检查配置是否正确..."

    if [[ ! -e "${PACMAN_CONF}" ]]; then
        (( vError=vError+1 ))
        msg_error "'${PACMAN_CONF}' 不存在." 1
    fi

    # 检查 iso 构建是否存在
    if typeset -f "build_mode_requirements_${BUILD_MODE}" &>/dev/null; then
        build_mode_requirements_${BUILD_MODE}
    else
        msg_error "'build_mode_requirements_${BUILD_MODE}' 不存在!" 1
    fi
    
    msg_info "完成!"
}

function _mount_rootfs()
{
    trap "_umount_airootfs" EXIT HUB INT TERM
    msg_info "install -d -m 0755 -- ${WORK_DIR}/mnt/airootfs"
    install -d -m 0755 -- "${WORK_DIR}/mnt/airootfs"
    msg_info "mount -- ${ROOTFS_DIR}.img ${WORK_DIR}/mnt/airootfs"
    mount -- "${ROOTFS_DIR}.img" "${WORK_DIR}/mnt/airootfs"
}


# 创建镜像
function make_rootfs_create_image()
{
    if (( $# < 1 )); then
        msg_error "函数 '${FUNCNAME[0]}' 至少需要一个参数" 1
    fi

    msg_info "${ROOTFS_IMAGE_TYPE}..."
    imagePath="${ISO_DIR}/${APP_NAME}/${ARCH}/airootfs.sfs"
    if [[ "${ROOTFS_IMAGE_TYPE}" == 'ext4+squashfs' ]] ; then
        msg_info "正在生成ext4+squashfs镜像..."
        mkfsExt4Options=( \
                '-d' "${ROOTFS_DIR}" \
                '-O' '^has_journal,^resize_inode' \
                '-E' "lazy_itable_init=0,root_owner=0:0,hash_seed=${ISO_UUID}" \
                '-m' '0' \
                '-F' \
                '-U' 'clear' \
            )
        rm -f -- "${ROOTFS_DIR}/.img"
        E2FSPROGS_FAKE_TIME="${BUILD_DATE}" mkfs.ext4 "${mkfsExt4Options[@]}" -- "${ROOTFS_DIR}/.img" 32G
        trune2fs -c 0 -i 0 -- "${imagePath}" > /dev/null
    
        imagePath="${ISO_DIR}/${APP_NAME}/${ARCH}/airootfs.sfs"
        rm -f -- "${imagePath}"

        msg_info "mksquashfs $@ ${imagePath} -noappend ${ROOTFS_IMAGE_SQUASHFS_OPTIONS[@]}"
        mksquashfs "${ROOTFS_DIR}/.img" "${imagePath}" -noappend "${ROOTFS_IMAGE_TOOL_OPTIONS[@]}"
        rm -f -- "${ROOTFS_DIR}/.img"

    elif [[ "${ROOTFS_IMAGE_TYPE}" == 'erofs' ]] ; then
        msg_info "正在生成erofs镜像..."
        imagePath="${ISO_DIR}/${APP_NAME}/${ARCH}/airootfs.erofs"
        mkfsErofsOptions=( '-U' "${ISO_UUID}" "${ROOTFS_IMAGE_TOOL_OPTIONS[@]}" )
        mkfs.erofs "${mkfsErofsOptions[@]}" -- "${imagePath}" "${ROOTFS_DIR}"
    else
        msg_error "不支持的镜像类型: '${ROOTFS_IMAGE_TYPE}'" 1
    fi
}

# 从源目录在SquashFS中创建ext4文件系统
function make_rootfs_img()
{
    if [[ ! -e "${ROOTFS_DIR}" ]]; then
        msg_error "'${ROOTFS_DIR}' 路径不存在" 1
    fi

    msg_info "开始创建一个 32GB 的 ext4 镜像 ..."
    msg_info "mkfs.ext4 -O '^has_journal,^resize_inode' -E 'lazy_itable_init=0' -m 0 -F -- ${ROOTFS_DIR}.img 32G"
    mkfs.ext4 -O '^has_journal,^resize_inode' -E 'lazy_itable_init=0' -m 0 -F -- "${ROOTFS_DIR}.img" 32G

    msg_info "tune2fs -c 0 -i 0 -- ${ROOTFS_DIR}.img > /dev/null"
    tune2fs -c 0 -i 0 -- "${ROOTFS_DIR}.img" > /dev/null

    _mount_rootfs
    msg_info "正在复制 '${ROOTFS_DIR}/' 到 '${WORK_DIR}/mnt/airootfs/'..."
    msg_info "cp -aT -- ${ROOTFS_DIR}/  ${WORK_DIR}/mnt/airootfs/"
    cp -aT -- "${ROOTFS_DIR}/" "${WORK_DIR}/mnt/airootfs/"
    msg_info "chown -- 0:0  ${WORK_DIR}/mnt/airootfs/"
    chown -- 0:0 "${WORK_DIR}/mnt/airootfs/"
    _umount_rootfs

    install -d -m 0755 -- "${WORK_DIR}/${INSTALL_DIR}/${ARCH}"
    msg_info "正在创建 SquashFS 镜像, 可能需要花点时间 ..."
    make_rootfs_create_image "${ROOTFS_DIR}"

    msg_info "rm -- ${ROOTFS_DIR}.img"
    rm -- "${ROOTFS_DIR}.img"
}

function make_rootfs_sfs()
{
    if [[ ! -e "${ROOTFS_DIR}" ]]; then
        msg_error "'${ROOTFS_DIR}' 路径不存在" 1
    fi

    install -d -m 0755 -- "${ISO_DIR}/${APP_NAME}/${ARCH}"
    msg_info "正在创建 SquashFS 镜像, 这可能需要花点时间 ..."
    make_rootfs_create_image "${ROOTFS_DIR}"
}

function mkchecksum()
{
    cd -- "${ISO_DIR}/${APP_NAME}/${ARCH}"
    chmod 0777 "${ISO_DIR}/${APP_NAME}/${ARCH}"
    msg_info "sha512sum airootfs.sfs > airootfs.sha512"
    sha512sum airootfs.sfs > airootfs.sha512
    cd -- "${OLDPWD}"
}

function _mksignature()
{
    msg_info "开始给 SquashFS 镜像签名 ..."
    msg_info "cd -- ${ISO_DIR}/${APP_NAME}/${ARCH}"
    cd -- "${ISO_DIR}/${APP_NAME}/${ARCH}"
    sudo -u ${SUDO_USER} gpg --detach-sign --default-key "${GPG_KEY}" airootfs.sfs
    cd -- "${OLDPWD}"
}

function _pacman()
{
    msg_info "正在安裝軟件包到 '${ROOTFS_DIR}/' ..."
    pacstrap -C "${WORK_DIR}/pacman.conf" -c -G -M -- "${ROOTFS_DIR}" "$@"
    msg_info "所有軟件包安裝完成!!!"
}

function check_is_root()
{
    if (( EUID != 0 )); then
        msg_error "必须以 root 运行." 1
    fi
}


function show_config
{
    local BUILD_DATE
    BUILD_DATE="$(date --utc --iso-8601=seconds -d "@${SOURCE_DATE_EPOCH}")"
    msg_info_pure "${APP_NAME} 配置值如下："
    msg_info_pure "             架构:       ${ARCH}"
    msg_info_pure "         工作目录:       ${WORK_DIR}"
    msg_info_pure "         构建时间:       ${BUILD_DATE}"
    msg_info_pure "         GPG 指纹:       ${GPG_KEY:-None}"
    msg_info_pure "         配置文件:       ${DIR_CONF}/env"
    msg_info_pure "  pacman 配置文件:       ${PACMAN_CONF}"
    msg_info_pure "       镜像文件名:       ${ISO_NAME}"
    msg_info_pure "             UUID:       ${ISO_UUID}"
    msg_info_pure "         引导模式:       ${BOOT_MODES[*]}"
    msg_info_pure "       要安裝的包:       ${PKG_LIST[*]}"
}

function make_pacman_conf()
{
    install --mode=0777 -d "${WORK_DIR}"
    [[ -e "${BUILD_DATE_FILE}" ]] || printf '%s\n' "${SOURCE_DATE_EPOCH}" > "${BUILD_DATE_FILE}"
   
    local CACHE_DIR SYS_CACHE_DIR PROFILE_CACHE_DIR
    SYS_CACHE_DIR="$(pacman-conf CacheDir| tr '\n' ' ')"
    PROFILE_CACHE_DIR="$(pacman-conf --config "${PACMAN_CONF}" CacheDir| tr '\n' ' ')"

    # 设置缓存目录
   if [[ "${PROFILE_CACHE_DIR}" != "/var/cache/pacman/pkg" ]] \
       && [[ "${SYS_CACHE_DIR}" != "${PROFILE_CACHE_DIR}" ]]; then
       CACHE_DIR="${PROFILE_CACHE_DIR}"
   else
       CACHE_DIR="${SYS_CACHE_DIR}"
   fi
   
   pacman-conf --config "${PACMAN_CONF}" \
       | sed '/CacheDir/d;/DBPath/d;/HookDir/d;/LogFile/d;/RootDir/d' > "${WORK_DIR}/pacman.conf"
   
   sed "/\[options\]/a CacheDir = ${CACHE_DIR}
        /\[options\]/a HookDir = ${ROOTFS_DIR}/etc/pacman.d/hooks/" \
            -i "${WORK_DIR}/pacman.conf"
}

function export_gpg_public_key()
{
    if [[ -n "${GPG_KEY}" ]]; then
        [[ ! -f "${WORK_DIR}/pubkey.gpg" ]] && sudo -u ${SUDO_USER} gpg --batch --output "${WORK_DIR}/pubkey.gpg" --export "${GPG_KEY}"
    fi
}

function make_custom_rootfs()
{
    local passwd=()

    install -d -m 0755 -o 0 -g 0 -- "${ROOTFS_DIR}"

    if [[ -d "${DIR_CONF}/rootfs" ]]; then
        cp -af --no-preserve=ownership -- "${DIR_CONF}/rootfs/." "${ROOTFS_DIR}"
        [[ -e "${ROOTFS_DIR}/etc/shadow" ]]  && chmod -f 0400 -- "${ROOTFS_DIR}/etc/shadow"
        [[ -e "${ROOTFS_DIR}/etc/gshadow" ]] && chmod -f 0400 -- "${ROOTFS_DIR}/etc/gshadow"

        if [[ -e "${ROOTFS_DIR}/etc/passwd" ]]; then
            while IFS=':' read -a passwd -r; do
                [[ "${passwd[5]}" == '/' ]] && continue
                [[ -z "${passwd[5]}" ]] && continue

                if [[ -d "${ROOTFS_DIR}${passwd[5]}" ]]; then
                    chown -hR -- "${passwd[2]}:${passwd[3]}" "${ROOTFS_DIR}${passwd[5]}"
                    chmod -f 0750 -- "${ROOTFS_DIR}${passwd[5]}"
                else
                    install -d -m 0750 -o "${passwd[2]}" -g "${passwd[3]}" -- "${ROOTFS_DIR}${passwd[5]}"
                fi
            done < "${ROOTFS_DIR}/etc/passwd"
        fi
    fi
}

function make_initramfs_config()
{
    [[ -f "${DIR_CONF}/initramfs/config/graceful-linux.conf" ]] \
        && install -m 0644 "${DIR_CONF}/initramfs/config/graceful-linux.conf" \
            "${ROOTFS_DIR}/etc/mkinitcpio.conf.d/"
    [[ -f "${DIR_CONF}/initramfs/hooks/build/graceful-linux-iso" ]] \
        && install -m 0755 -d "${ROOTFS_DIR}/etc/initcpio/install/" \
        && install -m 0755 "${DIR_CONF}/initramfs/hooks/build/graceful-linux-iso" "${ROOTFS_DIR}/etc/initcpio/install/"
    [[ -f "${DIR_CONF}/initramfs/hooks/build/graceful-linux-iso_loop_mnt" ]] \
        && install -m 0755 -d "${ROOTFS_DIR}/etc/initcpio/install/" \
        && install -m 0755 "${DIR_CONF}/initramfs/hooks/build/graceful-linux-iso_loop_mnt" "${ROOTFS_DIR}/etc/initcpio/install/"

    [[ -f "${DIR_CONF}/initramfs/hooks/runtime/graceful-linux-iso" ]] \
        && install -m 0755 -d "${ROOTFS_DIR}/etc/initcpio/hooks/" \
        && install -m 0755 "${DIR_CONF}/initramfs/hooks/runtime/graceful-linux-iso" "${ROOTFS_DIR}/etc/initcpio/hooks/"
    [[ -f "${DIR_CONF}/initramfs/hooks/runtime/graceful-linux-iso_loop_mnt" ]] \
        && install -m 0755 -d "${ROOTFS_DIR}/etc/initcpio/hooks/" \
        && install -m 0755 "${DIR_CONF}/initramfs/hooks/runtime/graceful-linux-iso_loop_mnt" "${ROOTFS_DIR}/etc/initcpio/hooks/"
}

function make_packages()
{
    if [[ -n "${GPG_KEY}" ]]; then
        exec {ISO_GNUPG_FD}<>"${WORK_DIR}/pubkey.gpg"
        export ISO_GNUPG_FD
    fi

    # 安装基础包
    _pacman "base"

    [[ -f "${DIR_CONF}/rootfs/etc/locale.gen" ]]    && install -m 0744 "${DIR_CONF}/rootfs/etc/locale.gen"  "${ROOTFS_DIR}/etc"
    [[ -f "${DIR_CONF}/rootfs/etc/locale.conf" ]]   && install -m 0744 "${DIR_CONF}/rootfs/etc/locale.conf" "${ROOTFS_DIR}/etc"

    _chroot_mount
    _chroot_run locale-gen
    _chroot_unmount

    _pacman "${PKG_LIST[@]}"
    if [[ -n "${GPG_KEY}" ]]; then
        exec {ISO_GNUPG_FD}<&-
        unset ISO_GNUPG_FD
    fi
    msg_info "OK!"
}

function make_version()
{
    msg_info "make_version"
    rm -f -- "${ROOTFS_DIR}/version"
    printf '%s\n' "${ISO_VERSION}" > "${ROOTFS_DIR}/version"

    install -d -m 0755 -- "${ISO_DIR}/${APP_NAME}"
    printf '%s\n' "${ISO_VERSION}" > "${ISO_DIR}/${APP_NAME}/version"

    rm -f -- "${ISO_DIR}/${APP_NAME}/grubenv"
    printf '%.1024s' "$(printf '# GRUB Environment Block\nNAME=%s\nVERSION=%s\n%s' \
            "${ISO_NAME}" "${ISO_VERSION}" "$(printf '%0.1s' "#"{1..1024})")" \
            > "${ISO_DIR}/${APP_NAME}/grubenv"

    osRelease="$(realpath -- "${ROOTFS_DIR}/etc/os-release")"
    if [[ ! -e "${ROOTFS_DIR}/etc/os-release" && -e "${ROOTFS_DIR}/usr/lib/os-release" ]]; then
        osRelease="$(realpath -- "${ROOTFS_DIR}/usr/lib/os-release")"
    fi

    if [[ "${osRelease}" == "${ROOTFS_DIR}"* ]]; then
        [[ ! -e "${osRelease}" ]] || sed -i '/^IMAGE_ID=/d;/^IMAGE_VERSION=/d' "${osRelease}"
        printf 'IMAGE_ID=%s\nIMAGE_VERSION=%s\n' "${ISO_NAME}" "${ISO_VERSION}" >>"${osRelease}"
    fi

    if [[ -f "${ROOTFS_DIR}/etc/os-release" ]]; then
        sed 's|^NAME="[^"]*"|NAME=\"Graceful Linux\"|;
             s|^PRETTY_NAME="[^"]*"|PRETTY_NAME=\"Graceful Linux\"|;
             s|^ID=[^*]*|ID=graceful-linux|;
             s|^HOME_URL="[^"]*"|HOME_URL="https:\/\/github.com\/graceful-linux"|;
             s|^DOCUMENTATION_URL="[^"]*"|DOCUMENTATION_URL="https:\/\/dingjingmaster-docs\.readthedocs\.io\/en\/latest\/index\.html"|' \
             "${ROOTFS_DIR}/etc/os-release" > "${ROOTFS_DIR}/etc/os-release"
    fi

    if [[ -f "${ROOTFS_DIR}/usr/lib/os-release" ]]; then
        sed 's|^NAME="[^"]*"|NAME=\"Graceful Linux\"|;
             s|^PRETTY_NAME="[^"]*"|PRETTY_NAME=\"Graceful Linux\"|;
             s|^ID=[^*]*|ID=graceful-linux|;
             s|^HOME_URL="[^"]*"|HOME_URL="https:\/\/github.com\/graceful-linux"|;
             s|^DOCUMENTATION_URL="[^"]*"|DOCUMENTATION_URL="https:\/\/dingjingmaster-docs\.readthedocs\.io\/en\/latest\/index\.html"|' \
             "${ROOTFS_DIR}/usr/lib/os-release" > "${ROOTFS_DIR}/usr/lib/os-release"
    fi

    # Touch /usr/lib/clock-epoch to give another hint on date and time
    # for systems with screwed or broken RTC.
    touch -m -d"@${SOURCE_DATE_EPOCH}" -- "${ROOTFS_DIR}/usr/lib/clock-epoch"
    msg_info "OK"
}

function make_customize_rootfs()
{
    # 将mkinitcpio相关内容复制到指定位置
    kernelName=$(ls ${ROOTFS_DIR}/usr/lib/modules/ | xargs | tr -d '\n')

    _chroot_mount
    _chroot_run "mkinitcpio -k ${kernelName} -z xz -g /boot/initramfs-${kernelName}.img"
    _chroot_unmount
    chmod 0755 "${ROOTFS_DIR}/boot/initramfs-${kernelName}.img"
    mv "${ROOTFS_DIR}/boot/initramfs-${kernelName}.img" "${ROOTFS_DIR}/boot/initramfs-linux.img"
}

function make_pkg_list()
{
    install -d -m 0755 -- "${ISO_DIR}/${APP_NAME}"
    pacman -Q --sysroot ${ROOTFS_DIR} > ${ISO_DIR}/${APP_NAME}/pkglist.${ARCH}.txt
}

function make_user_passwd()
{
    password="GracefulLinux"
    _chroot_mount
    _chroot_run "useradd -m -r -u 1000 -U GracefulLinux"
    _chroot_run "echo -e \"${password}\n${password}\" | passwd root -q"
    _chroot_run "echo -e \"${password}\n${password}\" | passwd GracefulLinux -q"
    _chroot_run "ln -sf /usr/lib/systemd/system/multi-user.target /usr/lib/systemd/system/default.target"
    _chroot_unmount

    if [[ -f "${DIR_CONF}/rootfs/etc/motd" ]]; then
        sed "s|%PASSWD%|${password}|g;" \
             "${DIR_CONF}/rootfs/etc/motd" > "${ROOTFS_DIR}/etc/motd"
    fi 

    if [[ -f "${DIR_CONF}/rootfs/etc/systemd/system/getty@tty1.service.d/autologin.conf" ]]; then
        sed "s|%PASSWD%|${password}|g;" \
             "${DIR_CONF}/rootfs/etc/systemd/system/getty@tty1.service.d/autologin.conf" \
             > "${ROOTFS_DIR}/etc/systemd/system/getty@tty1.service.d/autologin.conf"
    fi 

    # 将 GracefulLinux 用户添加到 sudoers 组中，注意添加的文件权限严格是 0440
    if [[ ! -f "${ROOTFS_DIR}/etc/sudoers.d/GracefulLinux" ]]; then
        echo 'GracefulLinux ALL=(ALL:ALL) ALL' > "${ROOTFS_DIR}/etc/sudoers.d/GracefulLinux"
        chmod 0440 "${ROOTFS_DIR}/etc/sudoers.d/GracefulLinux"
    fi
}

function make_common_grub_env_and_loopbackcfg() 
{
    local searchFilename

    install -d -m 0755 -- "${ISO_DIR}/boot/grub"
    # Create a /boot/grub/YYYY-mm-dd-HH-MM-SS-00.uuid file on ISO 9660. GRUB will search for it to find the ISO
    # volume. This is similar to what grub-mkrescue does, except it places the file in /.disk/, but we opt to use a
    # directory that does not start with a dot to avoid it being accidentally missed when copying the ISO's contents.
    searchFilename="/boot/grub/${ISO_UUID}.uuid"
    : >"${ISO_DIR}/${searchFilename}"

    # Write grubenv
    printf '%.1024s' \
        "$(printf '# GRUB Environment Block\nNAME=%s\nVERSION=%s\nISO_LABEL=%s\nINSTALL_DIR=%s\nARCH=%s\nISO_SEARCH_FILENAME=%s\n%s' \
            "${ISO_NAME}" \
            "${ISO_VERSION}" \
            "${ISO_LABEL}" \
            "${APP_NAME}" \
            "${ARCH}" \
            "${searchFilename}" \
            "$(printf '%0.1s' "#"{1..1024})")" \
        >"${ISO_DIR}/boot/grub/grubenv"

    # Copy loopback.cfg to /boot/grub/ on ISO 9660
    if [[ -e "${DIR_CONF}/grub/loopback.cfg" ]]; then
        sed "s|%ISO_LABEL%|${ISO_LABEL}|g;
             s|%ISO_UUID%|${ISO_UUID}|g;
             s|%INSTALL_DIR%|${APP_NAME}|g;
             s|%ARCH%|${ARCH}|g;
             s|%ISO_SEARCH_FILENAME%|${searchFilename}|g" \
            "${DIR_CONF}/grub/loopback.cfg" >"${ISO_DIR}/boot/grub/loopback.cfg"
    fi
}

function make_bootstrap_image()
{
    msg_info "创建可引导镜像..."
    cd -- "${WORK_DIR}"
    bsdtar -cf - "rootfs" | gzip -cn9 > "${WORK_DIR}/${ISO_NAME_FULL}"
    du -h -- "${WORK_DIR}/${ISO_NAME_FULL}"
    cd -- "${OLDPWD}"
}

function make_boot_modes()
{
    local bootmode
    msg_info "Boot modes: ${BOOT_MODES[@]}"
    for bootmode in "${BOOT_MODES[@]}"; do
        if typeset -f "make_boot_${bootmode}" &> /dev/null; then
            run_once "make_boot_${bootmode}"
        else
            msg_error "无效的 boot 模式: ${bootmode}" 1
        fi
    done

    if [[ "${BOOT_MODES[*]}" != *grub* ]]; then
        run_once make_common_grub_env_and_loopbackcfg
    fi
}

function make_cleanup()
{
    # 删除 /boot 下的文件
    if [[ -d "${ROOTFS_DIR}/boot" ]]; then
        find "${ROOTFS_DIR}/boot" -mindepth 1 -delete
    fi

    # 删除 pacman 数据库缓冲下的包文件 (*.tar.gz)
    if [[ -d "${ROOTFS_DIR}/var/lib/pacman" ]]; then
        find "${ROOTFS_DIR}/var/lib/pacman" -maxdepth 1 -type f -delete
    fi

    # 删除 pacman 数据库缓冲
    if [[ -d "${ROOTFS_DIR}/var/lib/pacman/sync" ]]; then
        find "${ROOTFS_DIR}/var/lib/pacman/sync" -delete
    fi

    # 删除 pacman 包缓冲
    if [[ -d "${ROOTFS_DIR}/var/cache/pacman/pkg" ]]; then
        find "${ROOTFS_DIR}/var/cache/pacman/pkg" -type f -delete
    fi

    # 删除所有的日志文件
    if [[ -d "${ROOTFS_DIR}/var/log" ]]; then
        find "${ROOTFS_DIR}/var/log" -type f -delete
    fi

    # 删除临时文件
    if [[ -d "${ROOTFS_DIR}/var/tmp" ]]; then
        find "${ROOTFS_DIR}/var/tmp" -mindepth 1 -delete
    fi

    # 删除 pacman 相关的文件
    find "${WORK_DIR}" \( -name '*.pacnew' -o -name '*.pacsave' -o -name '*.pacorig' \) -delete

    # 创建一个空的 /etc/matchine-id
    printf '' > "${ROOTFS_DIR}/etc/machine-id"
}

function make_prepare()
{
    if ! typeset -f "make_rootfs_${ROOTFS_IMAGE_TYPE}" &>/dev/null 2>&1; then
        msg_error "不支持的镜像类型: '${ROOTFS_IMAGE_TYPE}'" 1
    fi

    run_once make_rootfs_${ROOTFS_IMAGE_TYPE}
    mkchecksum
    
    if [[ "${GPG_KEY}" ]]; then
        _mksignature
    fi
}

# Build ISO
function make_iso()
{
    local xorrisofsOptions=()

    for bootmode in "${BOOT_MODES[@]}"; do
        if ! typeset -f "add_xorrisofs_options_${bootmode}"; then
            msg_warn "没找到 ${bootmode} 配置!"
        fi
        "add_xorrisofs_options_${bootmode}"
    done

    msg_info "开始创建 ISO 镜像 ..."
    rm -f "${WORK_DIR}/${ISO_NAME_FULL}"
    xorriso -as mkisofs \
        -v \
        -iso-level 3 \
        -full-iso9660-filenames \
        -joliet \
        -joliet-long \
        -rational-rock \
        -volid "graceful-linux" \
        -appid "graceful-linux" \
        -publisher "graceful-linux" \
        -preparer "${APP_NAME}" \
        "${xorrisofsOptions[@]}" \
        -output "${WORK_DIR}/${ISO_NAME_FULL}" \
        ${ISO_DIR}
    msg_info "完成!"
    du -h -- "${WORK_DIR}/${ISO_NAME_FULL}"
}


