#!/bin/bash

# SYSLINUX MBR (isohybrid)
function add_xorrisofs_options_bios.syslinux.mbr() 
{
    xorrisofsOptions+=(
        # SYSLINUX MBR bootstrap code; does not work without "-eltorito-boot syslinux/isolinux.bin"
        '-isohybrid-mbr' "${ISO_DIR}/boot/syslinux/isohdpfx.bin"
        # When GPT is used, create an additional partition in the MBR (besides 0xEE) for sectors 0–1 (MBR
        # bootstrap code area) and mark it as bootable
        # May allow booting on some systems
        # https://wiki.archlinux.org/title/Partitioning#Tricking_old_BIOS_into_booting_from_GPT
        '--mbr-force-bootable'
        # Move the first partition away from the start of the ISO to match the expectations of partition editors
        # May allow booting on some systems
        # https://dev.lovelyhq.com/libburnia/libisoburn/src/branch/master/doc/partition_offset.wiki
        '-partition_offset' '16'
    )
}

function add_xorrisofs_options_bios.syslinux.eltorito() 
{
    xorrisofsOptions+=(
        # El Torito boot image for x86 BIOS
        '-eltorito-boot' 'boot/syslinux/isolinux.bin'
        # El Torito boot catalog file
        '-eltorito-catalog' 'boot/syslinux/boot.cat'
        # Required options to boot with ISOLINUX
        '-no-emul-boot' '-boot-load-size' '4' '-boot-info-table'
    )
}

#######################

function make_boot_on_iso9660()
{
    local ucodeImage

    install -d -m 0755 -- "${ISO_DIR}/${APP_NAME}/boot/${ARCH}"
    install    -m 0644 -- "${ROOTFS_DIR}/boot/initramfs-"*".img"   "${ISO_DIR}/${APP_NAME}/boot/${ARCH}/"
    install    -m 0644 -- "${ROOTFS_DIR}/boot/vmlinuz-"*           "${ISO_DIR}/${APP_NAME}/boot/${ARCH}/"

    for ucodeImage in ${ucodes[@]}; do
        if [[ -e "${ROOTFS_DIR}/boot/${ucodeImage}" ]]; then
            install -m 0644 -- "${ROOTFS_DIR}/boot/${ucodeImage}" "${ISO_DIR}/${APP_NAME}/boot/"
            if [[ -e "${ROOTFS_DIR}/usr/share/licenses/${ucodeImage%.*}/" ]]; then
                install -d -m 0755 -- "${ISO_DIR}/boot/licenses/${ucodeImage%.*}/"
                install    -m 0644 -- "${ROOTFS_DIR}/usr/share/licenses/${ucodeImage%.*}/"* \
                    "${ISO_DIR}/${APP_NAME}/boot/licenses/${ucodeImage%.*}/"
            fi
        fi
    done
}

############################################

# bios.syslinux.mbr
function make_boot_bios.syslinux.mbr()
{
    msg_info "配置 syslinux BIOS 引导..."
    install -d -m 0755 -- "${ISO_DIR}/boot/syslinux"
    install -d -m 0755 -- "${ISO_DIR}/${APP_NAME}/boot/licenses/amd-ucode"
    install -d -m 0755 -- "${ISO_DIR}/${APP_NAME}/boot/licenses/intel-ucode"

    for _cfg in "${DIR_CONF}/syslinux/"*.cfg; do
        sed "s|%ISO_LABEL%|${ISO_LABEL}|g; \
             s|%INSTALL_DIR%|${APP_NAME}|g; \
             s|%ISO_UUID%|${ISO_UUID}|g; \
             s|%ARCH%|${ARCH}|g" \
            "${_cfg}" > "${ISO_DIR}/boot/syslinux/${_cfg##*/}"
    done

    if [[ -e "${DIR_CONF}/syslinux/splash.png" ]]; then
        install -m 0644 -- "${DIR_CONF}/syslinux/splash.png" "${ISO_DIR}/boot/syslinux/"
    fi

    install -m 0644 -- "${ROOTFS_DIR}/usr/lib/syslinux/bios/"*.c32          "${ISO_DIR}/boot/syslinux/"
    install -m 0644 -- "${ROOTFS_DIR}/usr/lib/syslinux/bios/lpxelinux.0"    "${ISO_DIR}/boot/syslinux/"
    install -m 0644 -- "${ROOTFS_DIR}/usr/lib/syslinux/bios/memdisk"        "${ISO_DIR}/boot/syslinux/"
   
    run_once make_boot_on_iso9660
   
    if [[ -e "${ISO_DIR}/boot/syslinux/hdt.c32" ]]; then
        install -d -m 0755 -- "${ISO_DIR}/boot/syslinux/hdt"
        if [[ -e "${ROOTFS_DIR}/usr/share/hwdata/pci.ids" ]]; then
            gzip -c -9 "${ROOTFS_DIR}/usr/share/hwdata/pci.ids" > \
                "${ISO_DIR}/boot/syslinux/hdt/pciids.gz"
        fi

        find "${ROOTFS_DIR}/usr/lib/modules" -name 'modules.alias' -print -exec gzip -c -9 '{}' ';' -quit > \
                "${ISO_DIR}/boot/syslinux/hdt/modalias.gz"
    fi
   
   if [[ -e "${ROOTFS_DIR}/boot/memtest86+/memtest.bin" ]]; then
       install -d -m 0755   -- "${ISO_DIR}/boot/memtest86+"
       install    -m 0644   -- "${ROOTFS_DIR}/boot/memtest86+/memtest.bin" "${ISO_DIR}/boot/memtest86+/memtest"
       install    -m 0644   -- "${ROOTFS_DIR}/usr/share/licenses/common/GPL2/license.txt" "${ISO_DIR}/boot/memtest86+/"
   fi
    msg_info "配置 syslinux BIOS 引导完成！"
}

# bios.syslinux.eltorito
function make_boot_bios.syslinux.eltorito()
{
    install -d -m 0755 -- "${ISO_DIR}/boot/syslinux"
    install    -m 0644 -- "${ROOTFS_DIR}/usr/lib/syslinux/bios/isolinux.bin" "${ISO_DIR}/boot/syslinux/"
    install    -m 0644 -- "${ROOTFS_DIR}/usr/lib/syslinux/bios/isohdpfx.bin" "${ISO_DIR}/boot/syslinux/"

    run_once make_boot_bios.syslinux.mbr
}

function validate_requirements_boot_bios.syslinux.mbr() 
{
    # bios.syslinux.mbr requires bios.syslinux.eltorito
    # shellcheck disable=SC2076
    if [[ ! " ${BOOT_MODES[*]} " =~ ' bios.syslinux.eltorito ' ]]; then
        msg_error "使用 'bios.syslinux.mbr' 但是没有配置 'bios.syslinux.eltorito'。" 1
    fi

    # Check if the syslinux package is in the package list
    # shellcheck disable=SC2076
    if [[ ! " ${PKG_LIST[*]} " =~ ' syslinux ' ]]; then
        msg_error "不支持 '${bootMode}': 安装的包列表中缺少 'syslinux'!" 1
    fi

    # Check if syslinux configuration files exist
    if [[ ! -d "${DIR_CONF}/syslinux" ]]; then
        msg_error "不支持'${bootMode}': ${DIR_CONF}/syslinux' 不存在!" 1
    else
        local cfgfile
        for cfgfile in "${DIR_CONF}/syslinux/"*'.cfg'; do
            if [[ -e "${cfgfile}" ]]; then
                break
            else
                msg_error "不支持 '${bootMode}': 在'${DIR_CONF}/syslinux/' 中未找到配置文件!" 1
            fi
        done
    fi

    # Check for optional packages
    # shellcheck disable=SC2076
    if [[ ! " ${PKG_LIST[*]} " =~ ' memtest86+ ' ]]; then
        msg_info "'${bootMode}': 未找到 'memtest86+'。无法在syslinux中做内存测试。"
    fi
}

function validate_requirements_boot_bios.syslinux.eltorito() 
{
    # bios.syslinux.eltorito has the exact same requirements as bios.syslinux.mbr
    validate_requirements_boot_bios.syslinux.mbr
}


